{"ast":null,"code":"'use strict';\n\nvar React = require('react');\n\nvar d3 = require('d3');\n\nvar CellContainer = require('./CellContainer');\n\nmodule.exports = React.createClass({\n  displayName: 'DataSeries',\n  propTypes: {\n    data: React.PropTypes.array,\n    colors: React.PropTypes.func,\n    colorAccessor: React.PropTypes.func,\n    width: React.PropTypes.number,\n    height: React.PropTypes.number\n  },\n  getDefaultProps: function () {\n    return {\n      data: [],\n      colors: d3.scale.category20c(),\n      colorAccessor: function (d, idx) {\n        return idx;\n      }\n    };\n  },\n  render: function () {\n    var props = this.props;\n    var treemap = d3.layout.treemap() // make sure calculation loop through all objects inside array\n    .children(function (d) {\n      return d;\n    }).size([props.width, props.height]).sticky(true).value(function (d) {\n      return d.value;\n    });\n    var tree = treemap(props.data);\n    var cells = tree.map(function (node, idx) {\n      return React.createElement(CellContainer, {\n        key: idx,\n        x: node.x,\n        y: node.y,\n        width: node.dx,\n        height: node.dy,\n        fill: props.colors(props.colorAccessor(node, idx)),\n        label: node.label,\n        fontSize: props.fontSize,\n        textColor: props.textColor,\n        hoverAnimation: props.hoverAnimation\n      });\n    }, this);\n    return React.createElement(\"g\", {\n      transform: props.transform,\n      className: \"treemap\"\n    }, cells);\n  }\n});","map":{"version":3,"sources":["/Users/Susan/Desktop/covidata/my-app/node_modules/react-d3/treemap/DataSeries.js"],"names":["React","require","d3","CellContainer","module","exports","createClass","displayName","propTypes","data","PropTypes","array","colors","func","colorAccessor","width","number","height","getDefaultProps","scale","category20c","d","idx","render","props","treemap","layout","children","size","sticky","value","tree","cells","map","node","createElement","key","x","y","dx","dy","fill","label","fontSize","textColor","hoverAnimation","transform","className"],"mappings":"AAAA;;AAEA,IAAIA,KAAK,GAAGC,OAAO,CAAC,OAAD,CAAnB;;AACA,IAAIC,EAAE,GAAGD,OAAO,CAAC,IAAD,CAAhB;;AACA,IAAIE,aAAa,GAAGF,OAAO,CAAC,iBAAD,CAA3B;;AAGAG,MAAM,CAACC,OAAP,GAAiBL,KAAK,CAACM,WAAN,CAAkB;AAEjCC,EAAAA,WAAW,EAAE,YAFoB;AAIjCC,EAAAA,SAAS,EAAE;AACTC,IAAAA,IAAI,EAAWT,KAAK,CAACU,SAAN,CAAgBC,KADtB;AAETC,IAAAA,MAAM,EAASZ,KAAK,CAACU,SAAN,CAAgBG,IAFtB;AAGTC,IAAAA,aAAa,EAAEd,KAAK,CAACU,SAAN,CAAgBG,IAHtB;AAITE,IAAAA,KAAK,EAAUf,KAAK,CAACU,SAAN,CAAgBM,MAJtB;AAKTC,IAAAA,MAAM,EAASjB,KAAK,CAACU,SAAN,CAAgBM;AALtB,GAJsB;AAYjCE,EAAAA,eAAe,EAAC,YAAW;AACzB,WAAO;AACLT,MAAAA,IAAI,EAAW,EADV;AAELG,MAAAA,MAAM,EAASV,EAAE,CAACiB,KAAH,CAASC,WAAT,EAFV;AAGLN,MAAAA,aAAa,EAAE,UAASO,CAAT,EAAYC,GAAZ,EAAkB;AAAC,eAAOA,GAAP;AAAY;AAHzC,KAAP;AAKD,GAlBgC;AAoBjCC,EAAAA,MAAM,EAAC,YAAW;AAEhB,QAAIC,KAAK,GAAG,KAAKA,KAAjB;AAEA,QAAIC,OAAO,GAAGvB,EAAE,CAACwB,MAAH,CAAUD,OAAV,GACE;AADF,KAEGE,QAFH,CAEa,UAASN,CAAT,EAAa;AAAC,aAAOA,CAAP;AAAU,KAFrC,EAGGO,IAHH,CAGQ,CAACJ,KAAK,CAACT,KAAP,EAAcS,KAAK,CAACP,MAApB,CAHR,EAIGY,MAJH,CAIU,IAJV,EAKGC,KALH,CAKU,UAAST,CAAT,EAAa;AAAE,aAAOA,CAAC,CAACS,KAAT;AAAiB,KAL1C,CAAd;AAOA,QAAIC,IAAI,GAAGN,OAAO,CAACD,KAAK,CAACf,IAAP,CAAlB;AAEA,QAAIuB,KAAK,GAAGD,IAAI,CAACE,GAAL,CAAU,UAASC,IAAT,EAAeZ,GAAf,EAAqB;AACzC,aACEtB,KAAK,CAACmC,aAAN,CAAoBhC,aAApB,EAAmC;AACjCiC,QAAAA,GAAG,EAAEd,GAD4B;AAEjCe,QAAAA,CAAC,EAAEH,IAAI,CAACG,CAFyB;AAGjCC,QAAAA,CAAC,EAAEJ,IAAI,CAACI,CAHyB;AAIjCvB,QAAAA,KAAK,EAAEmB,IAAI,CAACK,EAJqB;AAKjCtB,QAAAA,MAAM,EAAEiB,IAAI,CAACM,EALoB;AAMjCC,QAAAA,IAAI,EAAEjB,KAAK,CAACZ,MAAN,CAAaY,KAAK,CAACV,aAAN,CAAoBoB,IAApB,EAA0BZ,GAA1B,CAAb,CAN2B;AAOjCoB,QAAAA,KAAK,EAAER,IAAI,CAACQ,KAPqB;AAQjCC,QAAAA,QAAQ,EAAEnB,KAAK,CAACmB,QARiB;AASjCC,QAAAA,SAAS,EAAEpB,KAAK,CAACoB,SATgB;AAUjCC,QAAAA,cAAc,EAAErB,KAAK,CAACqB;AAVW,OAAnC,CADF;AAcD,KAfW,EAeT,IAfS,CAAZ;AAiBA,WACE7C,KAAK,CAACmC,aAAN,CAAoB,GAApB,EAAyB;AAACW,MAAAA,SAAS,EAAEtB,KAAK,CAACsB,SAAlB;AAA6BC,MAAAA,SAAS,EAAE;AAAxC,KAAzB,EACEf,KADF,CADF;AAKD;AAvDgC,CAAlB,CAAjB","sourcesContent":["'use strict';\n\nvar React = require('react');\nvar d3 = require('d3');\nvar CellContainer = require('./CellContainer');\n\n\nmodule.exports = React.createClass({\n\n  displayName: 'DataSeries',\n\n  propTypes: {\n    data:          React.PropTypes.array,\n    colors:        React.PropTypes.func,\n    colorAccessor: React.PropTypes.func,\n    width:         React.PropTypes.number,\n    height:        React.PropTypes.number\n  },\n\n  getDefaultProps:function() {\n    return {\n      data:          [],\n      colors:        d3.scale.category20c(),\n      colorAccessor: function(d, idx)  {return idx;}\n    };\n  },\n\n  render:function() {\n\n    var props = this.props;\n\n    var treemap = d3.layout.treemap()\n                    // make sure calculation loop through all objects inside array\n                    .children( function(d)  {return d;})\n                    .size([props.width, props.height])\n                    .sticky(true)\n                    .value( function(d)  { return d.value; });\n\n    var tree = treemap(props.data);\n\n    var cells = tree.map( function(node, idx)  {\n      return (\n        React.createElement(CellContainer, {\n          key: idx, \n          x: node.x, \n          y: node.y, \n          width: node.dx, \n          height: node.dy, \n          fill: props.colors(props.colorAccessor(node, idx)), \n          label: node.label, \n          fontSize: props.fontSize, \n          textColor: props.textColor, \n          hoverAnimation: props.hoverAnimation}\n        )\n      );\n    }, this);\n\n    return (\n      React.createElement(\"g\", {transform: props.transform, className: \"treemap\"}, \n        cells\n      )\n    );\n  }\n\n});\n"]},"metadata":{},"sourceType":"script"}